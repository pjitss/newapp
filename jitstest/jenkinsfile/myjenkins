properties([
    parameters([
        string(name: 'Prim_Node', defaultValue: 'WIN-Q3ACHLFMOI8', description: 'Specify the primary node'),
        string(name: 'Sec_Node', defaultValue: '192.168.0.135', description: 'Specify the secondary node'),
        string(name: 'DATABASE', defaultValue: 'db', description: 'Specify the database type')
    ])
])

node {
    try {
        stage('Checkout') {
            git branch: 'main', credentialsId: 'ansible_user', url: 'https://github.com/pjitss/newapp.git'
        }

        stage('Prepare Dynamic Inventory') {
            script {
                def inventoryContent = """
[primary]
${params.Prim_Node}

[secondary]
${params.Sec_Node}

[primary:vars]
ansible_connection=winrm
ansible_winrm_server_cert_validation=ignore
ansible_winrm_transport=basic
ansible_user=jits
ansible_password=redhat@123

[secondary:vars]
ansible_connection=winrm
ansible_winrm_server_cert_validation=ignore
ansible_winrm_transport=basic
ansible_user=jits
ansible_password=redhat@123
"""

                writeFile file: '/tmp/myinven', text: inventoryContent
            }
        }

        stage('Execute Ansible Playbook') {
            def extraVarsMap = [
                Prim_Node: params.Prim_Node,
                Sec_Node: params.Sec_Node
            ]

            sh """
                # Modify the PATH variables
                export PATH=$PATH:/home/jits/.local/bin/

                # Set the PYTHONUSERBASE
                export PYTHONUSERBASE=/home/jits/.local

                # Show the modified PATH
                echo "Modified PATH: $PATH"

                # Check which Python interpreter Jenkins is using
                which python3

                # Show location of ansible-playbook
                which ansible-playbook

                # Execute Ansible playbook
                /home/jits/.local/bin/ansible-playbook /home/jits/newapp/jitstest/playbook.yml -i /tmp/myinven --extra-vars "${extraVarsMap.collect{ key, val -> "$key=$val" }.join(' ')}"
            """
        }
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        throw e
    }
}
